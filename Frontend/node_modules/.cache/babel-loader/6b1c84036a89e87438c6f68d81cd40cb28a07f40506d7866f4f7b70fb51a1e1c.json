{"ast":null,"code":"const products = [];\nconst handleCounter = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : products;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"INCREMENT\":\n      const found = state.find(x => {\n        return x.identification === action.payload.identification;\n      });\n      let increment = found === undefined ? 0 : found.count;\n      state = state.filter(x => {\n        return x.identification !== action.payload.identification;\n      });\n      let newPayload = {\n        ...action.payload\n      };\n      newPayload.count = parseInt(increment) + 1;\n      return [...state, newPayload];\n      break;\n    case \"DECREMENT\":\n      const found1 = state.find(x => {\n        return x.identification === action.payload.identification;\n      });\n      let increment1 = found1 === undefined ? 0 : found1.count;\n      state = state.filter(x => {\n        return x.identification !== action.payload.identification;\n      });\n      let newPayload1 = {\n        ...action.payload\n      };\n      newPayload1.count = increment - 1 < 0 ? 0 : increment - 1;\n      return [...state, newPayload1];\n      break;\n    case \"WRITE\":\n      state = state.filter(x => {\n        return x.identification !== action.payload.identification;\n      });\n      let newPayload2 = {\n        ...action.payload\n      };\n      newPayload2.count = parseInt(action.payload.increment);\n      return [...state, newPayload2];\n      break;\n    default:\n      return state;\n      break;\n  }\n};\nexport default handleCounter;","map":{"version":3,"names":["products","handleCounter","state","arguments","length","undefined","action","type","found","find","x","identification","payload","increment","count","filter","newPayload","parseInt","found1","increment1","newPayload1","newPayload2"],"sources":["C:/Users/USUARIO/Documents/Proyectos/PruebaTiendaVirtual/tiendavirtual/src/redux/reducer/handleCounter.js"],"sourcesContent":["const products = [];\r\n\r\nconst handleCounter = (state = products, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"INCREMENT\":\r\n            const found = state.find((x) => {\r\n                return x.identification === action.payload.identification\r\n            });\r\n\r\n            let increment = found === undefined ? 0 : found.count;\r\n\r\n            state = state.filter((x) => {\r\n                return x.identification !== action.payload.identification\r\n            });\r\n\r\n            let newPayload = {\r\n                ...action.payload,\r\n            };\r\n            newPayload.count = (parseInt(increment) + 1);\r\n\r\n            return [\r\n                ...state,\r\n                newPayload\r\n            ];\r\n            break;\r\n\r\n        case \"DECREMENT\":\r\n            const found1 = state.find((x) => {\r\n                return x.identification === action.payload.identification\r\n            });\r\n\r\n            let increment1 = found1 === undefined ? 0 : found1.count;\r\n\r\n            state = state.filter((x) => {\r\n                return x.identification !== action.payload.identification\r\n            });\r\n\r\n            let newPayload1 = {\r\n                ...action.payload,\r\n            };\r\n            newPayload1.count = (increment - 1) < 0 ? 0 : (increment - 1);\r\n\r\n            return [\r\n                ...state,\r\n                newPayload1\r\n            ];\r\n            break;\r\n\r\n\r\n        case \"WRITE\":\r\n            state = state.filter((x) => {\r\n                return x.identification !== action.payload.identification\r\n            });\r\n\r\n            let newPayload2 = {\r\n                ...action.payload,\r\n            };\r\n            newPayload2.count = parseInt(action.payload.increment);\r\n\r\n            return [\r\n                ...state,\r\n                newPayload2\r\n            ];\r\n            break;\r\n            \r\n\r\n        default:\r\n            return state;\r\n            break;\r\n    }\r\n}\r\n\r\nexport default handleCounter;\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,EAAE;AAEnB,MAAMC,aAAa,GAAG,SAAAA,CAAA,EAA8B;EAAA,IAA7BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGH,QAAQ;EAAA,IAAEM,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAE3C,QAAQC,MAAM,CAACC,IAAI;IACf,KAAK,WAAW;MACZ,MAAMC,KAAK,GAAGN,KAAK,CAACO,IAAI,CAAEC,CAAC,IAAK;QAC5B,OAAOA,CAAC,CAACC,cAAc,KAAKL,MAAM,CAACM,OAAO,CAACD,cAAc;MAC7D,CAAC,CAAC;MAEF,IAAIE,SAAS,GAAGL,KAAK,KAAKH,SAAS,GAAG,CAAC,GAAGG,KAAK,CAACM,KAAK;MAErDZ,KAAK,GAAGA,KAAK,CAACa,MAAM,CAAEL,CAAC,IAAK;QACxB,OAAOA,CAAC,CAACC,cAAc,KAAKL,MAAM,CAACM,OAAO,CAACD,cAAc;MAC7D,CAAC,CAAC;MAEF,IAAIK,UAAU,GAAG;QACb,GAAGV,MAAM,CAACM;MACd,CAAC;MACDI,UAAU,CAACF,KAAK,GAAIG,QAAQ,CAACJ,SAAS,CAAC,GAAG,CAAE;MAE5C,OAAO,CACH,GAAGX,KAAK,EACRc,UAAU,CACb;MACD;IAEJ,KAAK,WAAW;MACZ,MAAME,MAAM,GAAGhB,KAAK,CAACO,IAAI,CAAEC,CAAC,IAAK;QAC7B,OAAOA,CAAC,CAACC,cAAc,KAAKL,MAAM,CAACM,OAAO,CAACD,cAAc;MAC7D,CAAC,CAAC;MAEF,IAAIQ,UAAU,GAAGD,MAAM,KAAKb,SAAS,GAAG,CAAC,GAAGa,MAAM,CAACJ,KAAK;MAExDZ,KAAK,GAAGA,KAAK,CAACa,MAAM,CAAEL,CAAC,IAAK;QACxB,OAAOA,CAAC,CAACC,cAAc,KAAKL,MAAM,CAACM,OAAO,CAACD,cAAc;MAC7D,CAAC,CAAC;MAEF,IAAIS,WAAW,GAAG;QACd,GAAGd,MAAM,CAACM;MACd,CAAC;MACDQ,WAAW,CAACN,KAAK,GAAID,SAAS,GAAG,CAAC,GAAI,CAAC,GAAG,CAAC,GAAIA,SAAS,GAAG,CAAE;MAE7D,OAAO,CACH,GAAGX,KAAK,EACRkB,WAAW,CACd;MACD;IAGJ,KAAK,OAAO;MACRlB,KAAK,GAAGA,KAAK,CAACa,MAAM,CAAEL,CAAC,IAAK;QACxB,OAAOA,CAAC,CAACC,cAAc,KAAKL,MAAM,CAACM,OAAO,CAACD,cAAc;MAC7D,CAAC,CAAC;MAEF,IAAIU,WAAW,GAAG;QACd,GAAGf,MAAM,CAACM;MACd,CAAC;MACDS,WAAW,CAACP,KAAK,GAAGG,QAAQ,CAACX,MAAM,CAACM,OAAO,CAACC,SAAS,CAAC;MAEtD,OAAO,CACH,GAAGX,KAAK,EACRmB,WAAW,CACd;MACD;IAGJ;MACI,OAAOnB,KAAK;MACZ;EAAM;AAElB,CAAC;AAED,eAAeD,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}